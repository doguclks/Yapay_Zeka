import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as pyp
from sklearn.metrics import accuracy_score
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense
from sklearn.datasets import make_classification
from keras.callbacks import EarlyStopping
from keras.callbacks import ModelCheckpoint
from sklearn.model_selection import KFold
from keras.utils import to_categorical


data_setim= pd.read_csv(r"C:\Users\doguk\Desktop\ML\Epileptic Seizure Recognition.csv")
data_setim = data_setim.replace(0, pd.NA).dropna()
X = data_setim.iloc[:,1:-1].values
y = data_setim.iloc[:,-1:].values
X, y = make_classification(n_samples=11500, n_features=180, n_informative=100, n_classes=6, random_state=42)
kfold = KFold(n_splits=40, shuffle=True, random_state=42)
accuracy_scores = []
for train_index, test_index in kfold.split(X, y):
    X_kfold, X_test = X[train_index], X[test_index]
    y_kfold, y_test = y[train_index], y[test_index]
    X_train, _, y_train, _ = train_test_split(X_kfold, y_kfold, test_size=0.3, shuffle=True, random_state=42)
    y_train_categorical = to_categorical(y_train, num_classes=6)
    y_test_categorical = to_categorical(y_test, num_classes=6)

    scaler = StandardScaler()
    scaler.fit(X_train)
    X_train = scaler.transform(X_train)
    X_test = scaler.transform(X_test) 

ann_model = Sequential()
ann_model.add(Dense(units=512,activation='relu'))
ann_model.add(Dense(units=512,activation='relu'))
ann_model.add(Dense(units=128,activation='relu'))
ann_model.add(Dense(units=128,activation='relu'))
ann_model.add(Dense(units=128,activation='relu'))
ann_model.add(Dense(units=64,activation='relu'))
ann_model.add(Dense(units=6,activation='softmax'))
ann_model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])
early_stopping = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=20)
checkpoint = ModelCheckpoint(filepath='C:\\Users\\Pc\\Desktop\\ML_project"/check_point' , verbose=1, save_best_only=True)

ann_model.fit(X_train,y_train_categorical,batch_size=37,epochs = 3,validation_split=(0.2),callbacks=[early_stopping],verbose=1)
#estimator = KerasClassifier(build_fn=ann_model, epochs=200, batch_size=5, verbose=0)
accuracy_score= ann_model.evaluate(X_test, y_test_categorical)
accuracy_scores.append(accuracy_score[1])

print(accuracy_score,kfold)
print("Mean Accuracy:", np.mean(accuracy_scores))
#results = cross_val_score(estimator, X, y, cv=kfold)
#ann_model.save("C:\\Users\\Pc\\Desktop\\ML_project")